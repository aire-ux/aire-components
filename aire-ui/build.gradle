plugins {
    id 'war'
    id 'java'
//    id 'com.vaadin'
    id 'java-test-fixtures'
    id 'org.springframework.boot'
//    id "com.github.node-gradle.node"
}


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {

    compileOnly "io.sunshower.arcus:arcus-lang"


    [
            'com.vaadin:flow-server',
            'javax.inject:javax.inject',
            'io.sunshower.base:model-api',
            'io.sunshower.base:model-core',
            'io.sunshower.base:file-realm',
            'io.sunshower.base:realm-api',
            "io.sunshower.arcus:arcus-ast",
            "io.sunshower.arcus:arcus-reflect",
            "io.sunshower.arcus:tag-builder@jar",
            "io.sunshower.arcus:arcus-identicon@jar",
            'commons-beanutils:commons-beanutils',
            "io.sunshower.arcus.persist:persist-api",
            'io.sunshower.arcus:condensation-core',
            'io.sunshower.arcus:condensation-json',
            'org.apache.commons:commons-configuration2',
            'io.sunshower.arcus.cryptkeeper:cryptkeeper-api',
            'io.sunshower.arcus.cryptkeeper:cryptkeeper-core',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.security:spring-security-test'
    ].each {
        implementation it
    }


    /**
     * zephyr dependencies
     */
    [
            'kernel-api',
            'kernel-lib@jar',
            'kernel-core',
            'sunshower-spring@jar',
            'synchronous-api@jar',
            'sunshower-yaml-reader@jar'
    ].each {
        compileOnly "io.sunshower.zephyr:$it"
        developmentOnly "io.sunshower.zephyr:$it"
        testFixturesApi "io.sunshower.zephyr:$it"
    }
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.11'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
    compileOnly 'io.sunshower.zephyr:spring-embedded-plugin'
    testImplementation 'io.sunshower.zephyr:spring-embedded-plugin'

    implementation('io.sunshower.zephyr:spring-embedded-plugin') {
        transitive = false
    }

    ['gyre-api'].each {
        compileOnly "io.sunshower.arcus:$it"
        testFixturesApi "io.sunshower.arcus:$it"
    }

    implementation project(':aire-ux-core')
    testFixturesApi(project(':aire-ux-core'))


    /**
     * implementation dependendencies
     */
    [
            'info.picocli:picocli',
            'com.vdurmont:semver4j',
            'org.reflections:reflections',
            'org.jboss.modules:jboss-modules',
    ].each {
        implementation it
        testFixturesApi it
    }

    [
            'com.vaadin:vaadin-spring-boot-starter'
    ].each { dep ->
        api(dep) {
            exclude module: "spring-boot-starter-tomcat"
        }
        testFixturesApi(dep) {
            exclude module: "spring-boot-starter-tomcat"
        }
    }
    [
    ]

    implementation 'org.eclipse.jgit:org.eclipse.jgit'
    implementation 'org.eclipse.jgit:org.eclipse.jgit.archive'
    testImplementation 'org.eclipse.jgit:org.eclipse.jgit.junit'

    implementation("org.springframework.boot:spring-boot-starter-undertow")


    /**
     * kernel test libraries
     */
    [
            'kernel-test',
            'kernel-test-common'
    ].each {
        testFixturesApi "io.sunshower.zephyr:$it"
    }


    [
            ':aire-test-spring',
            ':aire-ux-api:aire-api',
            ':aire-ux-api:aire-api-core',
            ':aire-ux-api:aire-api-spring',
    ].each {
        testFixturesApi project(it)
    }


    implementation project(':aire-ux-api:aire-api-core')
    implementation project(':aire-ux-api:aire-api-spring')

    [
            ':aire-ux-core',
            ':aire-ux-api:aire-api',
            ':aire-ux-api:aire-api-spring'
    ].each {
        testFixturesApi(testFixtures(project(it)))
    }
    implementation 'javax.websocket:javax.websocket-api:1.1'


    /**
     * general test libraries
     */
    testFixturesApi('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
    }
}

//task watchScss(type: NpmTask) {
//    dependsOn npmInstall
//    args = ['run', 'develop']
//}
//
//task buildScss(type: NpmTask) {
//    dependsOn npmInstall
//    args = ['run', 'build']
//}
//
////bootRun.dependsOn watchScss
//
//build.dependsOn buildScss
//
//vaadin {
//    pnpmEnable = false
//    productionMode = false
//}
defaultTasks("clean", "build")

bootWar {
    rootSpec.exclude("**/*arcus-lang*.jar", "**/*gyre-api*.jar", "**/*jakarta*.jar")
    archiveClassifier = 'dist'
    manifest {

        attributes(
                "group": project.group,
                "name": project.name,
                "version": '1.0.1',
                "description": "Aire Core Module",
                "type": "plugin"
        )
    }
}

war {
    archiveClassifier = ''
    manifest {

        attributes(
                "group": project.group,
                "name": project.name,
                "version": '1.0.1',
                "description": "Aire Core Module",
                "type": "plugin"
        )
    }
}

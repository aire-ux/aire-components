plugins {
    id 'java'
    id 'com.vaadin'
    id 'java-test-fixtures'
    id 'org.springframework.boot'
    id "com.github.node-gradle.node"
}


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {

    implementation "io.sunshower.arcus:arcus-ast"
    implementation "io.sunshower.arcus:arcus-lang"
    implementation "io.sunshower.arcus:arcus-reflect"
    implementation "io.sunshower.arcus.persist:persist-api"

    [
            ':aire-json-mapper',
            ':aire-css-selectors'
    ].each { dependency ->
        implementation project(dependency)
    }
    /**
     * zephyr dependencies
     */
    [
            'gyre-api',
            'kernel-api',
            'kernel-lib@jar',
            'kernel-core',
            'sunshower-spring@jar',
            'synchronous-api@jar',
            'spring-embedded-plugin',
            'sunshower-yaml-reader@jar'
    ].each {
        api "io.zephyr:$it"
        testFixturesApi "io.zephyr:$it"
    }
    implementation project(':aire-ux-core')
    testFixturesApi(project(':aire-ux-core'))


    /**
     * implementation dependendencies
     */
    [
            'info.picocli:picocli',
            'org.reflections:reflections',
            'org.jboss.modules:jboss-modules',
            'com.github.zafarkhaja:java-semver',
    ].each {
        implementation it
        testFixturesApi it
    }

    ['javax.inject:javax.inject:1',
     'com.vaadin:vaadin-spring-boot-starter'
    ].each { dep ->

        api dep
        testFixturesApi dep
    }

    /**
     * kernel test libraries
     */
    [
            'kernel-test',
            'kernel-test-common'
    ].each {
        testFixturesApi "io.zephyr:$it"
    }


    [
            ':aire-test-spring',
            ':aire-ux-api:aire-api',
            ':aire-ux-api:aire-api-core',
            ':aire-ux-api:aire-api-spring',
    ].each {
        testFixturesApi project(it)
    }

    implementation project(':aire-ux-api:aire-api-core')
    implementation project(':aire-ux-api:aire-api-spring')

    [
            ':aire-ux-core',
            ':aire-ux-api:aire-api',
            ':aire-ux-api:aire-api-spring'
    ].each {
        testFixturesApi(testFixtures(project(it)))
    }


    /**
     * general test libraries
     */
    testFixturesApi('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
    }
}

task watchScss(type: NpmTask) {
    dependsOn npmInstall
    args = ['run', 'develop']
}

task buildScss(type: NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build']
}

//bootRun.dependsOn watchScss

build.dependsOn buildScss

vaadin {
    pnpmEnable = false
}
defaultTasks("clean", "build")

bootJar {
    archiveClassifier = 'dist'
}

jar {
    archiveClassifier = ''
    manifest {

        attributes(
                "group": project.group,
                "name": project.name,
                "version": project.version,
        )
    }
}

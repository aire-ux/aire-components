plugins {
    id 'java'
    id 'com.vaadin'
    id 'java-test-fixtures'
    id 'org.springframework.boot'
    id "com.github.node-gradle.node"
}


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {

    implementation "io.sunshower.arcus:arcus-ast"
    implementation "io.sunshower.arcus:arcus-lang"
    implementation "io.sunshower.arcus:arcus-reflect"
    implementation "io.sunshower.arcus.persist:persist-api"

    [
            ':aire-json-mapper',
            ':aire-css-selectors'
    ].each { dependency ->
        implementation project(dependency)
    }
    /**
     * zephyr dependencies
     */
    [
            'gyre-api',
            'kernel-api',
            'kernel-lib@jar',
            'kernel-core',
            'sunshower-spring@jar',
            'synchronous-api@jar',
            'spring-embedded-plugin',
            'sunshower-yaml-reader@jar'
    ].each {
        implementation "io.zephyr:$it"
    }
    implementation project(':aire-ux-core')


    /**
     * implementation dependendencies
     */
    [
            'info.picocli:picocli',
            'javax.inject:javax.inject:1',
            'org.reflections:reflections',
            'org.jboss.modules:jboss-modules',
            'com.github.zafarkhaja:java-semver',
            'com.vaadin:vaadin-spring-boot-starter'
    ].each {
        implementation it
    }

    /**
     * kernel test libraries
     */
    [
            'kernel-test',
            'kernel-test-common'
    ].each {
        testImplementation "io.zephyr:$it"
    }


    [
            ':aire-test-spring',
            ':aire-ux-annotations:annotations',
            ':aire-ux-annotations:annotations-core',
            ':aire-ux-annotations:annotations-spring',
    ].each {
        testImplementation project(it)
    }

    implementation project(':aire-ux-annotations:annotations-core')
    implementation project(':aire-ux-annotations:annotations-spring')

    testImplementation(testFixtures(project(":aire-ux-core")))
    testImplementation(testFixtures(project(":aire-ux-annotations:annotations")))
    testImplementation(testFixtures(project(":aire-ux-annotations:annotations-spring")))

    /**
     * general test libraries
     */
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
//    developmentOnly "org.springframework.boot:spring-boot-devtools"
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
    }
}

task watchScss(type: NpmTask) {
//    dependsOn npmInstall
    args = ['run', 'develop']
}

task buildScss(type: NpmTask) {
//    dependsOn npmInstall
    args = ['run', 'build']
}

//bootRun.dependsOn watchScss

build.dependsOn buildScss

vaadin {
    pnpmEnable = false
}
defaultTasks("clean", "build")

jar {
    manifest {

        attributes(
                "group": project.group,
                "name": project.name,
                "version": project.version,
        )
    }
}
